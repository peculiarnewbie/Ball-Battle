//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Settings/Inputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Inputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Inputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Inputs"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""9181c4db-9731-4192-b47f-bc5af515c742"",
            ""actions"": [
                {
                    ""name"": ""Place Soldiers"",
                    ""type"": ""Value"",
                    ""id"": ""9104dbf4-9a8c-4665-a349-7c73ea16dee1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Excecute Placement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""1388f868-ac49-414f-ae09-177dd5cba1ab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2),Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Position Soldier"",
                    ""type"": ""Value"",
                    ""id"": ""0e5417e1-5700-4173-9996-fc44691f9b08"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""92daef86-1741-4039-9590-94ab27abfe5d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Place Soldiers"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d516dd8e-8e75-4a43-b055-afdbac32e2ee"",
                    ""path"": ""<Touchscreen>/primaryTouch"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Place Soldiers"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""24bc4a9c-345e-422e-8ff4-01155c6722a5"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Excecute Placement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ca99fff1-068d-4ef5-9b0d-93a3203a282e"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Excecute Placement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""33f90fc1-86cb-4f82-94ed-d1fcaa42d1af"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position Soldier"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5d6353ee-0b8d-4e10-a077-db236f971731"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position Soldier"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_PlaceSoldiers = m_Gameplay.FindAction("Place Soldiers", throwIfNotFound: true);
        m_Gameplay_ExcecutePlacement = m_Gameplay.FindAction("Excecute Placement", throwIfNotFound: true);
        m_Gameplay_PositionSoldier = m_Gameplay.FindAction("Position Soldier", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private IGameplayActions m_GameplayActionsCallbackInterface;
    private readonly InputAction m_Gameplay_PlaceSoldiers;
    private readonly InputAction m_Gameplay_ExcecutePlacement;
    private readonly InputAction m_Gameplay_PositionSoldier;
    public struct GameplayActions
    {
        private @Inputs m_Wrapper;
        public GameplayActions(@Inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @PlaceSoldiers => m_Wrapper.m_Gameplay_PlaceSoldiers;
        public InputAction @ExcecutePlacement => m_Wrapper.m_Gameplay_ExcecutePlacement;
        public InputAction @PositionSoldier => m_Wrapper.m_Gameplay_PositionSoldier;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void SetCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterface != null)
            {
                @PlaceSoldiers.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnPlaceSoldiers;
                @PlaceSoldiers.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnPlaceSoldiers;
                @PlaceSoldiers.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnPlaceSoldiers;
                @ExcecutePlacement.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnExcecutePlacement;
                @ExcecutePlacement.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnExcecutePlacement;
                @ExcecutePlacement.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnExcecutePlacement;
                @PositionSoldier.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnPositionSoldier;
                @PositionSoldier.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnPositionSoldier;
                @PositionSoldier.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnPositionSoldier;
            }
            m_Wrapper.m_GameplayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PlaceSoldiers.started += instance.OnPlaceSoldiers;
                @PlaceSoldiers.performed += instance.OnPlaceSoldiers;
                @PlaceSoldiers.canceled += instance.OnPlaceSoldiers;
                @ExcecutePlacement.started += instance.OnExcecutePlacement;
                @ExcecutePlacement.performed += instance.OnExcecutePlacement;
                @ExcecutePlacement.canceled += instance.OnExcecutePlacement;
                @PositionSoldier.started += instance.OnPositionSoldier;
                @PositionSoldier.performed += instance.OnPositionSoldier;
                @PositionSoldier.canceled += instance.OnPositionSoldier;
            }
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    public interface IGameplayActions
    {
        void OnPlaceSoldiers(InputAction.CallbackContext context);
        void OnExcecutePlacement(InputAction.CallbackContext context);
        void OnPositionSoldier(InputAction.CallbackContext context);
    }
}
